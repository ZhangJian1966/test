Repository 仓库
	用来存放项目代码，每个项目对应一个仓库
Star 收藏
	收藏项目的人数
Fork 复制克隆的项目
	forked from ....

Pull Request 发起请求
	Fork方 添加代码后  点击Pull Request请求  源代码方 同意后更新
Watch 关注
	关注项目，项目更新可以接受通知
lssue 事务卡片
	发现Bug，但目前没有成型代码

Github 主页
	左侧：显示动态
	右侧：显示git库
仓库主页
	项目信息：项目代码；版本；
个人主页


shadowsocks


创建仓库
	仓库名称
	项目描述
	在仓库下创建reademe文件来详细描绘项目

      新建文件

——————————————————————————————
git 的工作区
      Git工作区域
	Git Repository（Git 仓库）  最终确定的文件
	暂存区   暂存已经修改的文件
	工作区	添加、编辑、修改

git status 查看当前文件的位置
git add test.cpp 工作去 -> 暂存区
git commit -m "提交描述"   暂存区 -> 仓库

初始化Git
     设置用户名 git config --global user.name 'Zhangjian1966'
     设置用户名邮箱 git config --global user.email '1067511763@qq.com'
初始化Git仓库
    新建文件夹
        在文件夹内初始化Git仓库（隐藏文件）
             cd test
             git init
        创建文件 touch a1.cpp
        提交到暂存区 git add a1.cpp
        提交到仓库 git commit -m 'add a1.cpp'
     修改文件
         vi a1.cpp
         提交到暂存
         提交到仓库
     删除文件
          rm  a1.cpp
          从git中删除 git rm a1.cpp
          提交操作 git commit -m '提交操作'

——————————————————————————
Git远程仓库
     ①工作区 -> 暂存区
     ②暂存区 -> Git Repository
     ③Git 仓库 -> 服务器    git push
      git clone 仓库地址  下载仓库文件

      
    
